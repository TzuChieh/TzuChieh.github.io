
.. _program_listing_file_Source_DataIO_Stream_StdInputStream.h:

Program Listing for File StdInputStream.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_DataIO_Stream_StdInputStream.h>` (``Source\DataIO\Stream\StdInputStream.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "DataIO/Stream/IInputStream.h"
   #include "DataIO/FileSystem/Path.h"
   
   #include <utility>
   #include <istream>
   #include <memory>
   #include <string>
   
   namespace ph
   {
   
   class StdInputStream : public IInputStream
   {
   public:
       inline StdInputStream() = default;
       explicit StdInputStream(std::unique_ptr<std::istream> stream);
       StdInputStream(StdInputStream&& other);
   
       void read(std::size_t numBytes, std::byte* out_bytes) override;
       void readString(std::string* out_string, char delimiter) override;
       void seekGet(std::size_t pos) override;
       std::optional<std::size_t> tellGet() override;
       operator bool () const override;
       std::size_t readSome(std::size_t numBytes, std::byte* out_bytes) override;
   
       std::istream* getStream() const;
   
       StdInputStream& operator = (StdInputStream&& rhs);
   
   protected:
       bool isStreamGoodForRead() const;
   
       void ensureStreamIsGoodForRead() const;
   
       std::string getReasonForError() const;
   
   private:
       std::unique_ptr<std::istream> m_istream;
   };
   
   // In-header Implementations:
   
   inline StdInputStream::StdInputStream(StdInputStream&& other)
   {
       *this = std::move(other);
   }
   
   inline StdInputStream& StdInputStream::operator = (StdInputStream&& rhs)
   {
       m_istream = std::move(rhs.m_istream);
   }
   
   inline StdInputStream::operator bool () const
   {
       return isStreamGoodForRead();
   }
   
   inline std::istream* StdInputStream::getStream() const
   {
       return m_istream.get();
   }
   
   inline bool StdInputStream::isStreamGoodForRead() const
   {
       return m_istream != nullptr && m_istream->good();
   }
   
   }// end namespace ph
