
.. _program_listing_file_Source_Core_Intersectable_PLatLongEnvSphere.h:

Program Listing for File PLatLongEnvSphere.h
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Core_Intersectable_PLatLongEnvSphere.h>` (``Source\Core\Intersectable\PLatLongEnvSphere.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Core/Intersectable/PBasicSphere.h"
   #include "Math/TVector2.h"
   #include "Math/TVector3.h"
   
   namespace ph
   {
   
   namespace math { class RigidTransform; }
   
   // TODO: assert on transform wrappers that this class is not applicable
   class PLatLongEnvSphere : public PBasicSphere
   {
   public:
       PLatLongEnvSphere(const PrimitiveMetadata* metadata, real radius);
   
       PLatLongEnvSphere(
           const PrimitiveMetadata*    metadata, 
           real                        radius, 
           const math::RigidTransform* localToWorld,
           const math::RigidTransform* worldToLocal);
   
       void calcIntersectionDetail(
           const Ray& ray,
           HitProbe&  probe,
           HitDetail* out_detail) const override;
   
       bool latLong01ToSurface(
           const math::Vector2R& latLong01, 
           const math::Vector3R& observationPos,
           math::Vector3R*       out_surface) const;
   
   private:
       const math::RigidTransform* m_localToWorld;
       const math::RigidTransform* m_worldToLocal;
   };
   
   }// end namespace ph
