
.. _program_listing_file_Source_Core_LTABuildingBlock_lta.h:

Program Listing for File lta.h
==============================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Core_LTABuildingBlock_lta.h>` (``Source\Core\LTABuildingBlock\lta.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Common/primitive_type.h"
   #include "Math/TVector3.h"
   #include "Common/assertion.h"
   
   #include <cmath>
   
   namespace ph
   {
   
   namespace lta
   {
   
   /*
       Using shading normal for light transport algorithms is equivalent to using
       asymmetric BSDFs. This can lead to inconsistent results between regular 
       and adjoint algorithms. This correction factor, when multiplied with BSDF,
       restores the symmetric condition of the BSDF during importance transport.
   
       <Ns>: shading normal
       <Ng>: geometry normal
       <L>:  direction of incident importance
       <V>:  direction of excitant importance
   
       Note that all vectors are expected to be in unit length and leaving 
       the surface.
   
       References:
   
       Eric Veach, "Non-symmetric Scattering in Light Transport Algorithms",
       Eurographics Rendering Workshop 1996 Proceedings.
   */
   inline real importance_BSDF_Ns_corrector(
       const math::Vector3R& Ns,
       const math::Vector3R& Ng,
       const math::Vector3R& L,
       const math::Vector3R& V)
   {
       PH_ASSERT_GT(std::abs(Ns.dot(V) * Ng.dot(L)), 0.0_r);
   
       return std::abs((Ns.dot(V) * Ng.dot(L)) / (Ng.dot(V) * Ns.dot(L)));
   }
   
   }// end namespace lta
   
   }// end namespace ph
