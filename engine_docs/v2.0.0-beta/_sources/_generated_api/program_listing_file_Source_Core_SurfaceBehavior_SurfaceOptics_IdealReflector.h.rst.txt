
.. _program_listing_file_Source_Core_SurfaceBehavior_SurfaceOptics_IdealReflector.h:

Program Listing for File IdealReflector.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Core_SurfaceBehavior_SurfaceOptics_IdealReflector.h>` (``Source\Core\SurfaceBehavior\SurfaceOptics\IdealReflector.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Core/SurfaceBehavior/SurfaceOptics.h"
   #include "Core/SurfaceBehavior/Property/FresnelEffect.h"
   #include "Core/Texture/TTexture.h"
   #include "Math/Color/Spectrum.h"
   
   #include <memory>
   
   namespace ph
   {
   
   class IdealReflector : public SurfaceOptics
   {
   public:
       explicit IdealReflector(std::shared_ptr<FresnelEffect> fresnel);
   
       IdealReflector(
           std::shared_ptr<FresnelEffect>            fresnel, 
           std::shared_ptr<TTexture<math::Spectrum>> reflectionScale);
   
       ESurfacePhenomenon getPhenomenonOf(SurfaceElemental elemental) const override;
   
   private:
       void calcBsdf(
           const BsdfQueryContext& ctx,
           const BsdfEvalInput&    in,
           BsdfEvalOutput&         out) const override;
   
       void calcBsdfSample(
           const BsdfQueryContext& ctx,
           const BsdfSampleInput&  in,
           SampleFlow&             sampleFlow,
           BsdfSampleOutput&       out) const override;
   
       void calcBsdfSamplePdfW(
           const BsdfQueryContext& ctx,
           const BsdfPdfInput&     in,
           BsdfPdfOutput&          out) const override;
   
   private:
       std::shared_ptr<FresnelEffect>            m_fresnel;
       std::shared_ptr<TTexture<math::Spectrum>> m_reflectionScale;
   };
   
   }// end namespace ph
