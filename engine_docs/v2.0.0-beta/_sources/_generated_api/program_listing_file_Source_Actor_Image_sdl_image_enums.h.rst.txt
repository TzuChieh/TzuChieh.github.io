
.. _program_listing_file_Source_Actor_Image_sdl_image_enums.h:

Program Listing for File sdl_image_enums.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Actor_Image_sdl_image_enums.h>` (``Source\Actor\Image\sdl_image_enums.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "DataIO/SDL/sdl_interface.h"
   
   namespace ph
   {
   
   enum class EImageSampleMode
   {
       Unspecified = 0,
   
       Bilinear,
       Nearest,
       Trilinear
   };
   
   PH_DEFINE_SDL_ENUM(TBasicSdlEnum<EImageSampleMode>)
   {
       SdlEnumType sdlEnum("sample-mode");
       sdlEnum.description("Controls how the image will be sampled.");
   
       sdlEnum.addEntry(EnumType::Unspecified, "");
       sdlEnum.addEntry(EnumType::Nearest,     "nearest");
       sdlEnum.addEntry(EnumType::Bilinear,    "bilinear");
       sdlEnum.addEntry(EnumType::Trilinear,   "trilinear");
   
       return sdlEnum;
   }
   
   enum class EImageWrapMode
   {
       Unspecified = 0,
   
       ClampToEdge,
       Repeat,
       FlippedClampToEdge
   };
   
   PH_DEFINE_SDL_ENUM(TBasicSdlEnum<EImageWrapMode>)
   {
       SdlEnumType sdlEnum("wrap-mode");
       sdlEnum.description(
           "Controls how the image will be sampled when texture coordinates is not within the range [0, 1].");
   
       sdlEnum.addEntry(EnumType::Unspecified,        "");
       sdlEnum.addEntry(EnumType::Repeat,             "repeat");
       sdlEnum.addEntry(EnumType::ClampToEdge,        "clamp-to-edge");
       sdlEnum.addEntry(EnumType::FlippedClampToEdge, "flipped-clamp-to-edge");
   
       return sdlEnum;
   }
   
   }// end namespace ph
