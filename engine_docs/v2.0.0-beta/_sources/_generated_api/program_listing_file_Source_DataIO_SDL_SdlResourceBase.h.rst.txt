
.. _program_listing_file_Source_DataIO_SDL_SdlResourceBase.h:

Program Listing for File SdlResourceBase.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_DataIO_SDL_SdlResourceBase.h>` (``Source\DataIO\SDL\SdlResourceBase.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "DataIO/SDL/ISdlResource.h"
   #include "DataIO/SDL/SdlResourceId.h"
   #include "DataIO/SDL/ETypeCategory.h"
   #include "Common/assertion.h"
   
   namespace ph
   {
   
   class SdlResourceBase : public ISdlResource
   {
   protected:
       SdlResourceBase();
       SdlResourceBase(const SdlResourceBase& other);
       inline SdlResourceBase(SdlResourceBase&& other) = default;
   
       SdlResourceBase& operator = (const SdlResourceBase& rhs);
       inline SdlResourceBase& operator = (SdlResourceBase&& rhs) = default;
   
   public:
       ETypeCategory getDynamicCategory() const override = 0;
   
       SdlResourceId getId() const override;
   
   private:
       SdlResourceId m_resourceId;
   };
   
   // In-header Implementations:
   
   inline SdlResourceBase::SdlResourceBase() :
   
       ISdlResource(),
   
       m_resourceId(gen_sdl_resource_id())
   {
       PH_ASSERT_NE(m_resourceId, EMPTY_SDL_RESOURCE_ID);
   }
   
   inline SdlResourceBase::SdlResourceBase(const SdlResourceBase& other) :
       
       ISdlResource(other),
   
       // ID should not be copied--it must be re-generated
       m_resourceId(gen_sdl_resource_id())
   {
       PH_ASSERT_NE(m_resourceId, EMPTY_SDL_RESOURCE_ID);
   }
   
   inline SdlResourceId SdlResourceBase::getId() const
   {
       return m_resourceId;
   }
   
   inline SdlResourceBase& SdlResourceBase::operator = (const SdlResourceBase& rhs)
   {
       ISdlResource::operator = (rhs);
   
       // Note: m_resourceId is left unchanged--no need to re-generate as it should be done in ctors
   
       return *this;
   }
   
   }// end namespace ph
