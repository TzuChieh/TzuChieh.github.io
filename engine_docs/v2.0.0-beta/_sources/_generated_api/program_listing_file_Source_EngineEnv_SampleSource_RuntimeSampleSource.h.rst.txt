
.. _program_listing_file_Source_EngineEnv_SampleSource_RuntimeSampleSource.h:

Program Listing for File RuntimeSampleSource.h
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_EngineEnv_SampleSource_RuntimeSampleSource.h>` (``Source\EngineEnv\SampleSource\RuntimeSampleSource.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "EngineEnv/SampleSource/SampleSource.h"
   #include "Common/primitive_type.h"
   #include "Common/assertion.h"
   #include "DataIO/SDL/sdl_interface.h"
   
   #include <cstddef>
   
   namespace ph
   {
   
   // TODO: cached samples
   
   class RuntimeSampleSource : public SampleSource
   {
   public:
       inline RuntimeSampleSource() = default;
   
       void cook(const CoreCookingContext& ctx, CoreCookedUnit& cooked) override = 0;
   
       std::size_t getNumSamples() const;
   
   private:
       std::size_t m_numSamples;
   
   public:
       PH_DEFINE_SDL_CLASS(TOwnerSdlClass<RuntimeSampleSource>)
       {
           ClassType clazz("runtime");
           clazz.docName("Runtime Sample Source");
           clazz.description(
               "Sample sources that generate samples during render engine execution time.");
           clazz.baseOn<SampleSource>();
   
           TSdlSize<OwnerType> numSamples("samples", &OwnerType::m_numSamples);
           numSamples.description(
               "Number of samples that will be generated. This is the number of samples "
               "that each data unit (such as a single pixel) will receive, on average.");
           numSamples.defaultTo(1);
           numSamples.required();
           clazz.addField(numSamples);
   
           return clazz;
       }
   };
   
   // In-header Implementations:
   
   inline std::size_t RuntimeSampleSource::getNumSamples() const
   {
       return m_numSamples;
   }
   
   }// end namespace ph
