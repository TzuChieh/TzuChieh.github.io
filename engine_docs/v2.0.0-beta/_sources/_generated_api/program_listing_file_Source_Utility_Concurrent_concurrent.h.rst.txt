
.. _program_listing_file_Source_Utility_Concurrent_concurrent.h:

Program Listing for File concurrent.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Utility_Concurrent_concurrent.h>` (``Source\Utility\Concurrent\concurrent.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Common/assertion.h"
   #include "Math/math.h"
   
   #include <functional>
   #include <cstddef>
   #include <thread>
   
   namespace ph
   {
   
   inline void parallel_work(
       const std::size_t totalWorkSize,
       const std::size_t numWorkers,
   
       const std::function<
           void(std::size_t workerIdx, std::size_t workBegin, std::size_t workEnd)
       >& work)
   {
       PH_ASSERT_GT(numWorkers, 0);
   
       std::vector<std::thread> workers(numWorkers);
       for(std::size_t workerIdx = 0; workerIdx < numWorkers; ++workerIdx)
       {
           const auto workRange = math::ith_evenly_divided_range(workerIdx, totalWorkSize, numWorkers);
   
           // Skip the execution of 0-sized work
           const auto workSize = workRange.second - workRange.first;
           if(workSize > 0)
           {
               workers[workerIdx] = std::thread(work, workerIdx, workRange.first, workRange.second);
           }
       }
   
       for(auto& workerThread : workers)
       {
           // Not joining default-constructed thread and already-joined thread
           if(workerThread.joinable())
           {
               workerThread.join();
           }
       }
   }
   
   }// end namespace ph
