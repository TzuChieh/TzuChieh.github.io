
.. _program_listing_file_Source_DataIO_PlyFile.h:

Program Listing for File PlyFile.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_DataIO_PlyFile.h>` (``Source\DataIO\PlyFile.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "DataIO/FileSystem/Path.h"
   #include "Utility/SemanticVersion.h"
   #include "Math/constant.h"
   #include "Common/primitive_type.h"
   
   #include <vector>
   #include <cstddef>
   #include <string>
   #include <string_view>
   #include <climits>
   
   namespace ph { class IInputStream; }
   
   namespace ph
   {
   
   enum class EPlyFileFormat
   {
       ASCII = 0,
       Binary,
       BinaryBigEndian,
   
       NUM
   };
   
   enum class EPlyDataType
   {
       Unspecified = 0,
   
       Int8,
   
       UInt8,
   
       Int16,
   
       UInt16,
   
       Int32,
   
       UInt32,
   
       Float32,
   
       Float64,
   
       NUM
   };
   
   struct PlyIOConfig final
   {
       bool bIgnoreComments = true;
   
       bool bPreloadIntoMemory = true;
   
       std::size_t preloadMemoryThreshold = 1 * math::constant::GiB;
   
       std::size_t reduceStorageMemoryThreshold = 768 * math::constant::MiB;
   };
   
   class PlyPropertyValues;
   class PlyPropertyListValues;
   
   struct PlyProperty final
   {
       std::string              name;
       EPlyDataType             dataType;
       EPlyDataType             listSizeType;
       std::size_t              strideOffset;
       std::size_t              fixedListSize;
       std::vector<std::byte>   rawListBuffer;
       std::vector<std::size_t> listSizesPrefixSum;
   
       PlyProperty();
   
       bool isList() const;
       bool isFixedSizeList() const;
   };
   
   struct PlyElement final
   {
       std::string              name;
       std::size_t              numElements;
       std::vector<PlyProperty> properties;
       std::vector<std::byte>   rawBuffer;
       std::size_t              strideSize;
   
       PlyElement();
   
       bool isLoaded() const;
       PlyProperty* findProperty(std::string_view name);
       PlyPropertyValues propertyValues(PlyProperty* prop);
       PlyPropertyListValues listPropertyValues(PlyProperty* prop);
   };
   
   class PlyPropertyValues final
   {
       friend PlyElement;
   
   public:
       float64 get(std::size_t index) const;
       void set(std::size_t index, float64 value);
       std::size_t size() const;
       operator bool () const;
   
   private:
       PlyPropertyValues();
   
       PlyPropertyValues(
           std::byte*   rawBuffer,
           std::size_t  strideSize,
           std::size_t  numElements,
           EPlyDataType valueType);
   
       std::size_t getBufferOffset(std::size_t index) const;
   
       std::byte*   m_rawBuffer;
       std::size_t  m_strideSize;
       std::size_t  m_numElements;
       EPlyDataType m_valueType;
   };
   
   class PlyPropertyListValues final
   {
       friend PlyElement;
   
   public:
       float64 get(std::size_t listIndex, std::size_t listElementIndex) const;
       void set(std::size_t listIndex, std::size_t listElementIndex, float64 value);
       std::size_t size() const;
       std::size_t listSize(std::size_t listIndex) const;
       bool isFixedSizeList() const;
       std::size_t fixedListSize() const;
       operator bool() const;
   
   private:
       PlyPropertyListValues();
   
       PlyPropertyListValues(
           std::byte*   rawBuffer,
           std::size_t* listSizesPrefixSum,
           std::size_t  numLists,
           std::size_t  fixedListSize,
           EPlyDataType valueType);
   
       std::size_t getBufferOffset(std::size_t listIndex, std::size_t listElementIndex) const;
   
       std::byte*   m_rawBuffer;
       std::size_t* m_listSizesPrefixSum;
       std::size_t  m_numLists;
       std::size_t  m_fixedListSize;
       EPlyDataType m_valueType;
   };
   
   class PlyFile final
   {
       static_assert(sizeof(std::byte) * CHAR_BIT == 8,
           "The file explicitly depends on the fact that std::byte contains 8 bits.");
   
   public:
       PlyFile();
       explicit PlyFile(const Path& plyFilePath);
       PlyFile(const Path& plyFilePath, const PlyIOConfig& config);
   
       PlyElement* findElement(std::string_view name);
       std::size_t numElements() const;
       EPlyFileFormat getFormat() const;
       void setFormat(EPlyFileFormat format);
   
       std::size_t numComments() const;
       std::string_view getComment(std::size_t commentIndex) const;
   
       void loadFile(const Path& plyFilePath, const PlyIOConfig& config);
   
       void clearBuffer();
   
       SemanticVersion getVersion() const;
   
   private:
       void parseHeader(IInputStream& stream, const PlyIOConfig& config, const Path& plyFilePath);
       void loadTextBuffer(IInputStream& stream, const PlyIOConfig& config, const Path& plyFilePath);
       void loadBinaryBuffer(IInputStream& stream, const PlyIOConfig& config, const Path& plyFilePath);
       void compactBuffer();
       void reserveBuffer();
   
   private:
       EPlyFileFormat           m_format;
       SemanticVersion          m_version;
       std::vector<std::string> m_comments;
       std::vector<PlyElement>  m_elements;
   };
   
   }// end namespace ph
