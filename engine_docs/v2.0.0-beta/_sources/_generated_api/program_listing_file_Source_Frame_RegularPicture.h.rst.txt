
.. _program_listing_file_Source_Frame_RegularPicture.h:

Program Listing for File RegularPicture.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Frame_RegularPicture.h>` (``Source\Frame\RegularPicture.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Frame/picture_basics.h"
   #include "Frame/PictureData.h"
   #include "Common/primitive_type.h"
   #include "Math/Color/color_basics.h"
   #include "Math/TVector2.h"
   
   #include <cstddef>
   
   namespace ph
   {
   
   class RegularPictureFormat final
   {
   public:
       RegularPictureFormat();
   
       math::EColorSpace getColorSpace() const;
       bool isReversedComponents() const;
       bool hasAlpha() const;
       bool isGrayscale() const;
   
       void setColorSpace(math::EColorSpace colorSpace);
       void setIsReversedComponents(bool isReversedComponents);
       void setHasAlpha(bool hasAlpha);
       void setIsGrayscale(bool isGrayscale);
   
   private:
       math::EColorSpace m_colorSpace;
   
       bool m_isReversedComponents;
   
       bool m_hasAlpha;
   
       bool m_isGrayscale;
   };
   
   class RegularPicture final
   {
   public:
       RegularPicture();
   
       RegularPicture(
           math::Vector2S sizePx,
           std::size_t numComponents,
           EPicturePixelComponent componentType);
   
       RegularPicture(RegularPicture&& other);
   
       const RegularPictureFormat& getFormat() const;
       void setFormat(const RegularPictureFormat& format);
       std::size_t numComponents() const;
       EPicturePixelComponent getComponentType() const;
       bool isLDR() const;
       bool isHDR() const;
       math::Vector2S getSizePx() const;
       std::size_t getWidthPx() const;
       std::size_t getHeightPx() const;
       
       PictureData& getPixels();
       const PictureData& getPixels() const;
   
       RegularPicture& operator = (RegularPicture&& rhs);
   
   private:
       static bool isLDR(EPicturePixelComponent componentType);
       static bool isHDR(EPicturePixelComponent componentType);
   
       RegularPictureFormat m_format;
   
       PictureData m_pictureData;
   };
   
   inline math::EColorSpace RegularPictureFormat::getColorSpace() const
   {
       return m_colorSpace;
   }
   
   inline bool RegularPictureFormat::isReversedComponents() const
   {
       return m_isReversedComponents;
   }
   
   inline bool RegularPictureFormat::hasAlpha() const
   {
       return m_hasAlpha;
   }
   
   inline bool RegularPictureFormat::isGrayscale() const
   {
       return m_isGrayscale;
   }
   
   inline const RegularPictureFormat& RegularPicture::getFormat() const
   {
       return m_format;
   }
   
   inline math::Vector2S RegularPicture::getSizePx() const
   {
       return m_pictureData.getSizePx();
   }
   
   inline std::size_t RegularPicture::getWidthPx() const
   {
       return m_pictureData.getWidthPx();
   }
   
   inline std::size_t RegularPicture::getHeightPx() const
   {
       return m_pictureData.getHeightPx();
   }
   
   inline std::size_t RegularPicture::numComponents() const
   {
       return m_pictureData.numComponents();
   }
   
   inline EPicturePixelComponent RegularPicture::getComponentType() const
   {
       return m_pictureData.getComponentType();
   }
   
   inline PictureData& RegularPicture::getPixels()
   {
       return m_pictureData;
   }
   
   inline const PictureData& RegularPicture::getPixels() const
   {
       return m_pictureData;
   }
   
   }// end namespace ph
