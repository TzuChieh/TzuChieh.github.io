
.. _program_listing_file_Source_Actor_Dome_AImageDome.h:

Program Listing for File AImageDome.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Actor_Dome_AImageDome.h>` (``Source\Actor\Dome\AImageDome.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Actor/ADome.h"
   #include "DataIO/FileSystem/Path.h"
   #include "Core/Texture/TTexture.h"
   #include "Math/Color/Spectrum.h"
   #include "DataIO/SDL/sdl_interface.h"
   
   #include <memory>
   
   namespace ph
   {
   
   class AImageDome : public ADome
   {
   public:
       AImageDome();
       explicit AImageDome(const Path& imagePath);
       AImageDome(const AImageDome& other) = default;
   
       std::shared_ptr<TTexture<math::Spectrum>> loadRadianceFunction(ActorCookingContext& ctx) override;
       math::Vector2S getResolution() const override;
   
       AImageDome& operator = (AImageDome rhs);
   
       friend void swap(AImageDome& first, AImageDome& second);
   
   private:
       Path           m_imagePath;
       math::Vector2S m_imageResolution;
   
   public:
       PH_DEFINE_SDL_CLASS(TOwnerSdlClass<AImageDome>)
       {
           ClassType clazz("image-dome");
           clazz.docName("Image Dome Actor");
           clazz.description("Using a background image to represent the energy emitted from far away.");
           clazz.baseOn<ADome>();
   
           TSdlPath<OwnerType> imagePath("image", &OwnerType::m_imagePath);
           imagePath.description("Resource identifier for an image describing the energy distribution.");
           imagePath.required();
           clazz.addField(imagePath);
   
           return clazz;
       }
   };
   
   }// end namespace ph
