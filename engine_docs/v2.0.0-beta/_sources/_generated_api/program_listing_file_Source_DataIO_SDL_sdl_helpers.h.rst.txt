
.. _program_listing_file_Source_DataIO_SDL_sdl_helpers.h:

Program Listing for File sdl_helpers.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_DataIO_SDL_sdl_helpers.h>` (``Source\DataIO\SDL\sdl_helpers.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Common/primitive_type.h"
   #include "Common/assertion.h"
   #include "Math/TVector3.h"
   #include "Math/TVector2.h"
   #include "Math/TQuaternion.h"
   #include "DataIO/SDL/sdl_exceptions.h"
   #include "Utility/string_utils.h"
   #include "DataIO/SDL/ETypeCategory.h"
   
   #include <string>
   #include <string_view>
   #include <vector>
   #include <utility>
   
   namespace ph
   {
   
   class SdlClass;
   class SdlField;
   class SdlFunction;
   class SdlOutputPayload;
   
   }// end namespace ph
   
   namespace ph::sdl
   {
   
   // TODO: templatize vec3, quat related funcs
   
   real load_real(std::string_view sdlRealStr);
   integer load_integer(std::string_view sdlIntegerStr);
   
   template<typename FloatType>
   FloatType load_float(std::string_view sdlFloatStr);
   
   template<typename IntType>
   IntType load_int(std::string_view sdlIntStr);
   
   template<typename NumberType>
   NumberType load_number(std::string_view sdlNumberStr);
   
   template<typename Element>
   math::TVector2<Element> load_vector2(const std::string& sdlVector2Str);
   
   math::Vector3R load_vector3(const std::string& sdlVector3Str);
   math::QuaternionR load_quaternion(const std::string& sdlQuaternionStr);
   
   template<typename NumberType>
   std::vector<NumberType> load_number_array(const std::string& sdlNumberArrayStr);
   
   std::vector<math::Vector3R> load_vector3_array(const std::string& sdlVector3ArrayStr);
   
   void save_real(real value, std::string* out_str);
   void save_integer(integer value, std::string* out_str);
   
   template<typename FloatType>
   void save_float(FloatType value, std::string* out_str, std::size_t maxChars = 32);
   
   template<typename IntType>
   void save_int(IntType value, std::string* out_str, std::size_t maxChars = 32);
   
   template<typename NumberType>
   void save_number(NumberType value, std::string* out_str, std::size_t maxChars = 32);
   
   template<typename Element>
   void save_vector2(const math::TVector2<Element>& value, std::string* out_str);
   
   void save_vector3(const math::Vector3R& value, std::string* out_str);
   void save_quaternion(const math::QuaternionR& value, std::string* out_str);
   
   template<typename NumberType>
   void save_number_array(const std::vector<NumberType>& values, std::string* out_str);
   
   void save_vector3_array(const std::vector<math::Vector3R>& values, std::string* out_str);
   
   void save_field_id(const SdlField* sdlField, SdlOutputPayload& payload);
   
   bool is_resource_identifier(std::string_view sdlValueStr);
   
   bool is_reference(std::string_view sdlValueStr);
   
   std::string gen_pretty_name(const SdlClass* clazz);
   std::string gen_pretty_name(const SdlField* field);
   std::string gen_pretty_name(const SdlFunction* func);
   std::string gen_pretty_name(const SdlClass* clazz, const SdlField* field);
   
   auto get_all_callable_functions(const SdlClass* callableParentClass)
   -> std::vector<std::pair<const SdlFunction*, const SdlClass*>>;
   
   template<typename T>
   constexpr ETypeCategory category_of();
   
   }// end namespace ph::sdl
   
   #include "DataIO/SDL/sdl_helpers.ipp"
