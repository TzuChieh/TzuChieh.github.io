
.. _program_listing_file_Source_Math_Color_spectral_samples.h:

Program Listing for File spectral_samples.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Math_Color_spectral_samples.h>` (``Source\Math\Color\spectral_samples.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Math/Color/color_enums.h"
   #include "Math/Color/color_basics.h"
   #include "Common/assertion.h"
   
   #include <utility>
   #include <cstddef>
   
   namespace ph::math
   {
   
   template<typename T, CSpectralSampleProps SampleProps>
   constexpr T wavelength_interval_of() noexcept;
   
   template<typename T, CSpectralSampleProps SampleProps>
   constexpr std::pair<T, T> wavelength_range_of(std::size_t sampleIndex) noexcept;
   
   template<typename T, CSpectralSampleProps SampleProps = DefaultSpectralSampleProps>
   T estimate_samples_energy(const TSpectralSampleValues<T, SampleProps>& srcSamples);
   
   template<typename T, CSpectralSampleProps SampleProps = DefaultSpectralSampleProps>
   TSpectralSampleValues<T, SampleProps> normalize_samples_energy(const TSpectralSampleValues<T, SampleProps>& srcSamples);
   
   template<typename T, CSpectralSampleProps SampleProps = DefaultSpectralSampleProps>
   constexpr TSpectralSampleValues<T, SampleProps> constant_spectral_samples(T constant);
   
   template<typename T, typename U, CSpectralSampleProps SampleProps = DefaultSpectralSampleProps>
   TSpectralSampleValues<T, SampleProps> resample_spectral_samples(
       const U*          wavelengthsNM,
       const U*          values,
       std::size_t       numPoints,
       ESpectralResample algorithm = ESpectralResample::Default);
   
   template<typename T, CSpectralSampleProps SampleProps = DefaultSpectralSampleProps>
   TSpectralSampleValues<T, SampleProps> resample_illuminant_E();
   
   template<typename T, CSpectralSampleProps SampleProps = DefaultSpectralSampleProps>
   TSpectralSampleValues<T, SampleProps> resample_illuminant_D65();
   
   template<typename T, CSpectralSampleProps SampleProps = DefaultSpectralSampleProps>
   TSpectralSampleValues<T, SampleProps> resample_black_body_radiance(T temperatureK);
   
   template<typename T, CSpectralSampleProps SampleProps = DefaultSpectralSampleProps, EReferenceWhite NORMALIZER = EReferenceWhite::D65>
   TTristimulusValues<T> spectral_samples_to_CIE_XYZ(const TSpectralSampleValues<T, SampleProps>& srcSamples, EColorUsage usage);
   
   }// end namespace ph::math
   
   #include "Math/Color/spectral_samples.ipp"
