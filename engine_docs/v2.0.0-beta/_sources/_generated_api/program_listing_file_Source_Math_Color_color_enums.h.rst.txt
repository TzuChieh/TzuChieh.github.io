
.. _program_listing_file_Source_Math_Color_color_enums.h:

Program Listing for File color_enums.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Math_Color_color_enums.h>` (``Source\Math\Color\color_enums.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   namespace ph::math
   {
   
   enum class EColorSpace
   {
       Unspecified = 0,
   
       CIE_XYZ,
   
       CIE_xyY,
   
       Linear_sRGB,
   
       sRGB,
   
       ACEScg,
   
       Spectral_Smits,
   
       // Special values:
       
       // Number of entries (should always be the one next to last entry)
       NUM,
   
       // Default spectral representation
       Spectral = Spectral_Smits
   };
   
   enum class EReferenceWhite
   {
       Unspecified = 0,
   
       // CIE Illuminant A
       A,
   
       // CIE Illuminant B
       B,
   
       // CIE Illuminant C
       C,
   
       // Illuminant D Series: represent natural light
       D50,
       D55,
       D60,
       D65,
       D75,
   
       // Equal-energy radiator
       E,
   
       // Illuminant F Series: various types of fluorescent lighting
       F1,
       F2,
       F3,
       F4,
       F5,
       F6,
       F7,
       F8,
       F9,
       F10,
       F11,
       F12,
   
       // Illuminant Series LED: different LED types (approx. 2700 K to 6600 K)
       LED_B1,
       LED_B2,
       LED_B3,
       LED_B4,
       LED_B5,
       LED_BH1,
       LED_RGB1,
       LED_V1,
       LED_V2,
   
       // Custom White Points
   
       ACES,
   
       // Special values:
   
       // Number of entries (should always be the one next to last entry)
       NUM
   };
   
   enum class EChromaticAdaptation
   {
       Unspecified = 0,
   
       XYZScaling,
   
       Bradford,
   
       VonKries,
   
       // TODO: https://en.wikipedia.org/wiki/CIECAM02
       //CAT02
   
       // TODO: spectral route
   
       // Special values:
   
       Default = Bradford
   };
   
   enum class EColorUsage
   {
       Unspecified = 0,
   
       RAW,
   
       EMR,
   
       ECF
   };
   
   enum class ESpectralResample
   {
       Unspecified = 0,
   
       PiecewiseAveraged,
   
       // TODO: gaussian and other methods
   
       // Special values:
   
       Default = PiecewiseAveraged
   };
   
   }// end namespace ph::math
