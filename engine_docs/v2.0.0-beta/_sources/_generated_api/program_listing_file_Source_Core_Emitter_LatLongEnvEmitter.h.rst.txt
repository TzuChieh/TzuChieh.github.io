
.. _program_listing_file_Source_Core_Emitter_LatLongEnvEmitter.h:

Program Listing for File LatLongEnvEmitter.h
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Core_Emitter_LatLongEnvEmitter.h>` (``Source\Core\Emitter\LatLongEnvEmitter.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Core/Emitter/SurfaceEmitter.h"
   #include "Math/Color/Spectrum.h"
   #include "Core/Texture/TTexture.h"
   #include "Math/Random/TPwcDistribution2D.h"
   #include "Math/TVector2.h"
   
   #include <memory>
   #include <cstddef>
   
   namespace ph
   {
   
   class PLatLongEnvSphere;
   
   class LatLongEnvEmitter : public SurfaceEmitter
   {
   public:
       using RadianceTexture = std::shared_ptr<TTexture<math::Spectrum>>;
   
       LatLongEnvEmitter(
           const PLatLongEnvSphere* surface,
           const RadianceTexture&   radiance,
           const math::Vector2S&    resolution);
   
       void evalEmittedRadiance(const SurfaceHit& X, math::Spectrum* out_radiance) const override;
       void genDirectSample(DirectEnergySampleQuery& query, SampleFlow& sampleFlow) const override;
   
       // FIXME: ray time
       void emitRay(SampleFlow& sampleFlow, Ray* out_ray, math::Spectrum* out_Le, math::Vector3R* out_eN, real* out_pdfA, real* out_pdfW) const override;
   
       real calcDirectSamplePdfW(const SurfaceHit& emitPos, const math::Vector3R& targetPos) const override;
       real calcRadiantFluxApprox() const override;
   
   private:
       const PLatLongEnvSphere*       m_surface;
       RadianceTexture                m_radiance;
       math::TPwcDistribution2D<real> m_sampleDistribution;
       real                           m_radiantFluxApprox;
   };
   
   }// end namespace ph
