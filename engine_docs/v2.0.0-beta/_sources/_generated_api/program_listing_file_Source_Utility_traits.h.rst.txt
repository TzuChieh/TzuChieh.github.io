
.. _program_listing_file_Source_Utility_traits.h:

Program Listing for File traits.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Utility_traits.h>` (``Source\Utility\traits.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <type_traits>
   #include <utility>
   #include <cstddef>
   
   namespace ph
   {
   
   // TODO: variants that ignores return type
   
   template<typename A, typename B, typename C>
   concept CCanAdd = requires (A a, B b, C c)
   {
       c = a + b;
   };
   
   template<typename A, typename B, typename C>
   concept CCanMultiply = requires (A a, B b, C c)
   {
       c = a * b;
   };
   
   
   template<typename Built, typename From, typename = void>
   struct IsBuildable : std::false_type {};
   
   template<typename Built, typename From>
   struct IsBuildable
   <
       Built, From,
       std::enable_if_t
       <
           std::is_convertible_v<From, Built> || 
           std::is_constructible_v<Built, From>
       >
   > : std::true_type {};
   
   template<typename ObjType>
   concept CSubscriptable = requires (ObjType obj, std::size_t index)
   {
       obj[index];
   };
   
   template<typename EnumType>
   concept CIsEnum = std::is_enum_v<EnumType>;
   
   template<typename EnumType>
   concept CIsEnumWithSizeInfo = CIsEnum<EnumType> && requires
   {
       { EnumType::SIZE } -> std::convertible_to<EnumType>;
   };
   
   template<typename NumberType>
   concept CIsNumber = std::is_arithmetic_v<NumberType>;
   
   }// end namespace ph
