
.. _program_listing_file_Source_Actor_Image_GradientImage.cpp:

Program Listing for File GradientImage.cpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Actor_Image_GradientImage.cpp>` (``Source\Actor\Image\GradientImage.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include "Actor/Image/GradientImage.h"
   #include "Core/Texture/TLinearGradientTexture.h"
   
   namespace ph
   {
   
   GradientImage::GradientImage() :
   
       BinaryMixedImage(),
   
       m_beginUvw(0, 0, 0), 
       m_endUvw  (1, 1, 0)
   {}
   
   std::shared_ptr<TTexture<Image::Array>> GradientImage::genNumericTexture(
       ActorCookingContext& ctx)
   {
       const auto& images = checkoutImages();
       if(!images.first|| !images.second)
       {
           return nullptr;
       }
   
       return std::make_shared<TLinearGradientTexture<Image::Array>>(
           m_beginUvw, 
           images.first->genNumericTexture(ctx), 
           m_endUvw,
           images.second->genNumericTexture(ctx));
   }
   
   std::shared_ptr<TTexture<math::Spectrum>> GradientImage::genColorTexture(
       ActorCookingContext& ctx)
   {
       const auto& images = checkoutImages();
       if(!images.first || !images.second)
       {
           return nullptr;
       }
   
       return std::make_shared<TLinearGradientTexture<math::Spectrum>>(
           m_beginUvw,
           images.first->genColorTexture(ctx),
           m_endUvw,
           images.second->genColorTexture(ctx));
   }
   
   void GradientImage::setUvwEndpoints(const math::Vector3R& beginUvw, const math::Vector3R& endUvw)
   {
       m_beginUvw = beginUvw;
       m_endUvw   = endUvw;
   }
   
   }// end namespace ph
