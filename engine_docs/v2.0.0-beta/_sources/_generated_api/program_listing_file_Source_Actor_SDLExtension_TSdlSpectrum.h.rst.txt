
.. _program_listing_file_Source_Actor_SDLExtension_TSdlSpectrum.h:

Program Listing for File TSdlSpectrum.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Actor_SDLExtension_TSdlSpectrum.h>` (``Source\Actor\SDLExtension\TSdlSpectrum.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "DataIO/SDL/Introspect/TSdlValue.h"
   #include "DataIO/SDL/Introspect/TSdlOptionalValue.h"
   #include "Common/primitive_type.h"
   #include "Common/assertion.h"
   #include "Math/Color/Spectrum.h"
   #include "DataIO/SDL/sdl_helpers.h"
   #include "DataIO/SDL/SdlResourceIdentifier.h"
   #include "DataIO/SDL/Introspect/SdlInputContext.h"
   #include "DataIO/io_utils.h"
   #include "DataIO/io_exceptions.h"
   #include "Actor/SDLExtension/image_loaders.h"
   #include "Actor/SDLExtension/sdl_color_usage_type.h"
   
   #include <type_traits>
   #include <string>
   #include <vector>
   #include <utility>
   
   namespace ph
   {
   
   template<typename Owner, typename SdlValueType = TSdlValue<math::Spectrum, Owner>>
   class TSdlSpectrum : public SdlValueType
   {
       static_assert(std::is_base_of_v<TAbstractSdlValue<math::Spectrum, Owner>, SdlValueType>,
           "SdlValueType should be a subclass of TAbstractSdlValue.");
   
   public:
       template<typename ValueType>
       inline TSdlSpectrum(
           std::string valueName, 
           const math::EColorUsage usage,
           ValueType Owner::* const valuePtr) :
   
           SdlValueType("spectrum", std::move(valueName), valuePtr),
   
           m_usage(usage)
       {}
   
       inline std::string valueAsString(const math::Spectrum& spectrum) const override
       {
           // TODO: add type, # values?
           return spectrum.toString();
       }
   
   protected:
       inline void loadFromSdl(
           Owner&                 owner,
           const SdlInputPayload& payload,
           const SdlInputContext& ctx) const override
       {
           // TODO: allow for more color spaces via tag
           this->setValue(owner, sdl::load_spectrum(payload, m_usage));
       }
   
       void saveToSdl(
           const Owner&            owner,
           SdlOutputPayload&       out_payload,
           const SdlOutputContext& ctx) const override
       {
           // TODO
           PH_ASSERT_UNREACHABLE_SECTION();
       }
   
   private:
       math::EColorUsage m_usage;
   };
   
   template<typename Owner>
   using TSdlOptionalSpectrum = TSdlSpectrum<Owner, TSdlOptionalValue<math::Spectrum, Owner>>;
   
   }// end namespace ph
