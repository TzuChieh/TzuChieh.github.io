
.. _program_listing_file_Source_Core_SurfaceBehavior_SurfaceOptics_IdealAbsorber.cpp:

Program Listing for File IdealAbsorber.cpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Core_SurfaceBehavior_SurfaceOptics_IdealAbsorber.cpp>` (``Source\Core\SurfaceBehavior\SurfaceOptics\IdealAbsorber.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include "Core/SurfaceBehavior/SurfaceOptics/IdealAbsorber.h"
   #include "Common/assertion.h"
   #include "Core/SurfaceBehavior/BsdfEvalQuery.h"
   #include "Core/SurfaceBehavior/BsdfSampleQuery.h"
   #include "Core/SurfaceBehavior/BsdfPdfQuery.h"
   
   namespace ph
   {
   
   IdealAbsorber::IdealAbsorber() : 
       SurfaceOptics()
   {
       m_phenomena.set({ESurfacePhenomenon::DIFFUSE_REFLECTION});
   }
   
   ESurfacePhenomenon IdealAbsorber::getPhenomenonOf(const SurfaceElemental elemental) const
   {
       PH_ASSERT_EQ(elemental, 0);
   
       return ESurfacePhenomenon::DIFFUSE_REFLECTION;
   }
   
   void IdealAbsorber::calcBsdf(
       const BsdfQueryContext& ctx,
       const BsdfEvalInput&    in,
       BsdfEvalOutput&         out) const
   {
       out.bsdf.setColorValues(0);
   }
   
   void IdealAbsorber::calcBsdfSample(
       const BsdfQueryContext& ctx,
       const BsdfSampleInput&  in,
       SampleFlow&             /* sampleFlow */,
       BsdfSampleOutput&       out) const
   {
       out.setMeasurability(false);
   }
   
   void IdealAbsorber::calcBsdfSamplePdfW(
       const BsdfQueryContext& ctx,
       const BsdfPdfInput&     in,
       BsdfPdfOutput&          out) const
   {
       out.sampleDirPdfW = 0.0_r;
   }
   
   }// end namespace ph
