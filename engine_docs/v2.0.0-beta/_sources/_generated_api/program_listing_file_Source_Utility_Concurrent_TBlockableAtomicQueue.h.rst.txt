
.. _program_listing_file_Source_Utility_Concurrent_TBlockableAtomicQueue.h:

Program Listing for File TBlockableAtomicQueue.h
================================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Utility_Concurrent_TBlockableAtomicQueue.h>` (``Source\Utility\Concurrent\TBlockableAtomicQueue.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <moodycamel/blockingconcurrentqueue.h>
   
   #include <cstddef>
   
   namespace ph
   {
   
   template<typename T>
   class TBlockableAtomicQueue final
   {
   public:
       TBlockableAtomicQueue();
       explicit TBlockableAtomicQueue(std::size_t initialCapacity);
   
       template<typename U>
       void enqueue(U&& item);
   
       template<typename U>
       bool tryEnqueue(U&& item);
   
       bool tryDequeue(T* out_item);
   
       void waitDequeue(T* out_item);
   
       std::size_t estimatedSize() const;
   
   private:
       /*
       For more information about the queue, please see the documentation of `TAtomicQueue::m_queue` as they
       share similar properties.
       */
       moodycamel::BlockingConcurrentQueue<T> m_queue;
   };
   
   }// end namespace ph
   
   #include "Utility/Concurrent/TBlockableAtomicQueue.ipp"
