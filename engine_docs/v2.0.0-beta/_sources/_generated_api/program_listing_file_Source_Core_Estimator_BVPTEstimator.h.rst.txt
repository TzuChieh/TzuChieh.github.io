
.. _program_listing_file_Source_Core_Estimator_BVPTEstimator.h:

Program Listing for File BVPTEstimator.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Core_Estimator_BVPTEstimator.h>` (``Source\Core\Estimator\BVPTEstimator.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Core/Estimator/FullRayEnergyEstimator.h"
   
   namespace ph
   {
   
   /*
       BVPT: Backward Vanilla Path Tracing
   
       This estimator is the basic version of path tracing. Rays shot from
       the receiver, bouncing around the scene until an emitter is hit, gather
       its emitted power and keep bouncing... Most online tutorials 
       implemented this GI algorithm. Since this estimator is relatively
       simple but still unbiased, it is good for ground truth rendering if 
       the correctness of another estimator is in doubt.
   */
   class BVPTEstimator : public FullRayEnergyEstimator
   {
   public:
       void update(const Integrand& integrand) override;
   
       void estimate(
           const Ray&        ray,
           const Integrand&  integrand,
           SampleFlow&       sampleFlow,
           EnergyEstimation& out_estimation) const override;
   
       std::string toString() const override;
   };
   
   // In-header Implementations:
   
   inline void BVPTEstimator::update(const Integrand& integrand)
   {}
   
   inline std::string BVPTEstimator::toString() const
   {
       return "Backward Vanilla Path Tracing Estimator";
   }
   
   }// end namespace ph
