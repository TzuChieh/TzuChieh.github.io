
.. _program_listing_file_Source_Core_SurfaceBehavior_SurfaceOptics_IdealTransmitter.h:

Program Listing for File IdealTransmitter.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Core_SurfaceBehavior_SurfaceOptics_IdealTransmitter.h>` (``Source\Core\SurfaceBehavior\SurfaceOptics\IdealTransmitter.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Core/SurfaceBehavior/SurfaceOptics.h"
   #include "Core/SurfaceBehavior/Property/DielectricFresnel.h"
   #include "Core/Texture/TTexture.h"
   #include "Math/Color/Spectrum.h"
   
   #include <memory>
   
   namespace ph
   {
   
   class IdealTransmitter : public SurfaceOptics
   {
   public:
       explicit IdealTransmitter(std::shared_ptr<DielectricFresnel> fresnel);
   
       IdealTransmitter(
           std::shared_ptr<DielectricFresnel>  fresnel,
           std::shared_ptr<TTexture<math::Spectrum>> transmissionScale);
   
       ESurfacePhenomenon getPhenomenonOf(SurfaceElemental elemental) const override;
   
   private:
       void calcBsdf(
           const BsdfQueryContext& ctx,
           const BsdfEvalInput&    in,
           BsdfEvalOutput&         out) const override;
   
       void calcBsdfSample(
           const BsdfQueryContext& ctx,
           const BsdfSampleInput&  in,
           SampleFlow&             sampleFlow,
           BsdfSampleOutput&       out) const override;
   
       void calcBsdfSamplePdfW(
           const BsdfQueryContext& ctx,
           const BsdfPdfInput&     in,
           BsdfPdfOutput&          out) const override;
   
   private:
       std::shared_ptr<DielectricFresnel>        m_fresnel;
       std::shared_ptr<TTexture<math::Spectrum>> m_transmissionScale;
   };
   
   }// end namespace ph
