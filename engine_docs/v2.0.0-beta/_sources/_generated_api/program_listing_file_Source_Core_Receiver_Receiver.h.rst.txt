
.. _program_listing_file_Source_Core_Receiver_Receiver.h:

Program Listing for File Receiver.h
===================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Core_Receiver_Receiver.h>` (``Source\Core\Receiver\Receiver.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Common/primitive_type.h"
   #include "Math/TVector2.h"
   #include "Math/TVector3.h"
   #include "Common/assertion.h"
   #include "Math/Color/Spectrum.h"
   
   namespace ph::math { class RigidTransform; }
   
   namespace ph
   {
   
   class Ray;
   class RayDifferential;
   
   // TODO: time
   class Receiver
   {
   public:
       explicit Receiver(const math::RigidTransform* receiverToWorld);
   
       inline virtual ~Receiver() = default;
   
       virtual math::Spectrum receiveRay(const math::Vector2D& rasterCoord, Ray* out_ray) const = 0;
   
       // Given a ray generated by receiveRay() along with the parameters for it, 
       // calculates differential information on the origin of the ray.
       // The default implementation uses numerical differentiation for 
       // the differentials.
       /*virtual void calcSensedRayDifferentials(const math::Vector2R& filmNdcPos, const Ray& sensedRay,
                                               RayDifferential* out_result) const;*/
   
       virtual void evalEmittedImportanceAndPdfW(const math::Vector3R& targetPos, math::Vector2R* const out_filmCoord, math::Vector3R* const out_importance, real* out_filmArea, real* const out_pdfW) const = 0;
   
       const math::RigidTransform& getReceiverToWorld() const;
   
   private:
       const math::RigidTransform* m_receiverToWorld;
   };
   
   // In-header Implementations:
   
   inline const math::RigidTransform& Receiver::getReceiverToWorld() const
   {
       PH_ASSERT(m_receiverToWorld);
   
       return *m_receiverToWorld;
   }
   
   }// end namespace ph
