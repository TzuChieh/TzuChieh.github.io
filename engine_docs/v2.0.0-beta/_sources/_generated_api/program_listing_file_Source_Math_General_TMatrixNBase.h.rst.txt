
.. _program_listing_file_Source_Math_General_TMatrixNBase.h:

Program Listing for File TMatrixNBase.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Math_General_TMatrixNBase.h>` (``Source\Math\General\TMatrixNBase.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Math/General/TMatrixMxNBase.h"
   
   namespace ph::math
   {
   
   template<typename Derived, typename T, std::size_t N>
   class TMatrixNBase : public TMatrixMxNBase<Derived, T, N, N>
   {
   private:
       using Base = TMatrixMxNBase<Derived, T, N, N>;
       using Self = TMatrixNBase;
   
   protected:
       using Base::m;
   
   // Hide special members as this class is not intended to be used polymorphically.
   // It is derived class's choice to expose them (by defining them in public) or not.
   protected:
       inline TMatrixNBase() = default;
       inline TMatrixNBase(const TMatrixNBase& other) = default;
       inline TMatrixNBase(TMatrixNBase&& other) = default;
       inline TMatrixNBase& operator = (const TMatrixNBase& rhs) = default;
       inline TMatrixNBase& operator = (TMatrixNBase&& rhs) = default;
       inline ~TMatrixNBase() = default;
   
   public:
       Derived& setIdentity();
   
       Derived& setScale(const TRawColVector<T, N>& scaleFactor);
   
       Derived mul(const Derived& rhsMatrix) const;
       Derived& mulLocal(const Derived& rhsMatrix);
       Derived mulTransposed(const Derived& rhsMatrix) const;
       Derived& mulTransposedLocal(const Derived& rhsMatrix);
       void mul(const Derived& rhsMatrix, Derived* out_result) const;
       void mulTransposed(const Derived& rhsMatrix, Derived* out_result) const;
       Derived transpose() const;
       Derived& transposeLocal();
   
       using Base::Base;
   
       using Base::NUM_ROWS;
       using Base::NUM_COLS;
       using Base::numRows;
       using Base::numCols;
   
       using Base::mul;
       using Base::mulLocal;
       using Base::multiplyVector;
       using Base::multiplyMatrix;
       using Base::multiplyTransposedMatrix;
       using Base::transposeMatrix;
       using Base::set;
   
       using Base::operator [];
   
       using Base::toString;
   
       // TODO: inverse, determinant
   };
   
   }// end namespace ph::math
   
   #include "Math/General/TMatrixNBase.ipp"
