
.. _program_listing_file_Source_Actor_Material_Utility_RoughnessToAlphaMapping.h:

Program Listing for File RoughnessToAlphaMapping.h
==================================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Actor_Material_Utility_RoughnessToAlphaMapping.h>` (``Source\Actor\Material\Utility\RoughnessToAlphaMapping.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Common/primitive_type.h"
   #include "Actor/Material/Utility/ERoughnessToAlpha.h"
   
   #include <algorithm>
   #include <cmath>
   
   namespace ph
   {
   
   class RoughnessToAlphaMapping final
   {
   public:
       static real equaled(const real roughness);
   
       static real squared(const real roughness);
   
       static real pbrtV3(const real roughness);
   
       static real map(const real roughness, ERoughnessToAlpha mapType);
   };
   
   // In-header Implementations:
   
   inline real RoughnessToAlphaMapping::equaled(const real roughness)
   {
       return roughness;
   }
   
   inline real RoughnessToAlphaMapping::squared(const real roughness)
   {
       return roughness * roughness;
   }
   
   inline real RoughnessToAlphaMapping::pbrtV3(const real roughness)
   {
       const real clampedRoughness = std::max(roughness, 0.001_r);
       const real x                = std::log(clampedRoughness);
   
       return 1.621420000_r + 
              0.819955000_r * x + 
              0.173400000_r * x * x + 
              0.017120100_r * x * x * x + 
              0.000640711_r * x * x * x * x;
   }
   
   inline real RoughnessToAlphaMapping::map(const real roughness, const ERoughnessToAlpha mapType)
   {
       switch(mapType)
       {
       case ERoughnessToAlpha::Equaled:
           return equaled(roughness);
   
       case ERoughnessToAlpha::Squared:
           return squared(roughness);
   
       case ERoughnessToAlpha::PbrtV3:
           return pbrtV3(roughness);
   
       default:
           return squared(roughness);
       }
   }
   
   }// end namespace ph
