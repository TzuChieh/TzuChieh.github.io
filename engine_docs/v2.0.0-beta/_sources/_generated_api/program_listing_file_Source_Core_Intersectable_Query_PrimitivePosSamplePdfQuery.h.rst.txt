
.. _program_listing_file_Source_Core_Intersectable_Query_PrimitivePosSamplePdfQuery.h:

Program Listing for File PrimitivePosSamplePdfQuery.h
=====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Core_Intersectable_Query_PrimitivePosSamplePdfQuery.h>` (``Source\Core\Intersectable\Query\PrimitivePosSamplePdfQuery.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Common/primitive_type.h"
   #include "Math/TVector3.h"
   
   #include <cstddef>
   
   namespace ph { class HitDetail; }
   namespace ph { class PrimitivePosSampleQuery; }
   
   namespace ph
   {
   
   class PrimitivePosSamplePdfInput final
   {
   public:
       math::Vector3R position;
       std::size_t    faceId;
   
       PrimitivePosSamplePdfInput();
   
       void set(const math::Vector3R& position);
       void set(const math::Vector3R& position, std::size_t faceId);
       void set(const HitDetail& detail);
       void set(const PrimitivePosSampleQuery& query);
   };
   
   class PrimitivePosSamplePdfOutput final
   {
   public:
       real pdfA;
   
       PrimitivePosSamplePdfOutput();
       operator bool () const;
   };
   
   class PrimitivePosSamplePdfQuery final
   {
   public:
       using Input  = PrimitivePosSamplePdfInput;
       using Output = PrimitivePosSamplePdfOutput;
   
       Input  in;
       Output out;
   
       PrimitivePosSamplePdfQuery();
   };
   
   // In-header Implementations:
   
   inline PrimitivePosSamplePdfOutput::PrimitivePosSamplePdfOutput() :
       pdfA(0)
   {}
   
   inline PrimitivePosSamplePdfOutput::operator bool () const
   {
       return pdfA > 0;
   }
   
   inline PrimitivePosSamplePdfQuery::PrimitivePosSamplePdfQuery() :
       in(), out()
   {}
   
   }// end namespace ph
