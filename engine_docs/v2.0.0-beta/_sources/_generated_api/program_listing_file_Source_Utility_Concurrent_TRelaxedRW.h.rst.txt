
.. _program_listing_file_Source_Utility_Concurrent_TRelaxedRW.h:

Program Listing for File TRelaxedRW.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Utility_Concurrent_TRelaxedRW.h>` (``Source\Utility\Concurrent\TRelaxedRW.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <atomic>
   #include <utility>
   
   namespace ph
   {
   
   template<typename T>
   class TRelaxedRW final
   {
   public:
       inline TRelaxedRW()
           : m_atomic(T())
       {}
   
       template<typename U>
       inline TRelaxedRW(U&& value)
           : m_atomic(std::forward<U>(value))
       {}
   
       inline T relaxedRead() const
       {
           return m_atomic.load(std::memory_order_relaxed);
       }
   
       template<typename U>
       inline void relaxedWrite(U&& value)
       {
           m_atomic.store(std::forward<U>(value), std::memory_order_relaxed);
       }
   
   private:
       std::atomic<T> m_atomic;
   };
   
   }// end namespace ph
