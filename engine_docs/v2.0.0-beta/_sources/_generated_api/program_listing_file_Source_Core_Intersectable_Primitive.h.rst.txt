
.. _program_listing_file_Source_Core_Intersectable_Primitive.h:

Program Listing for File Primitive.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Core_Intersectable_Primitive.h>` (``Source\Core\Intersectable\Primitive.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Core/Intersectable/Intersectable.h"
   #include "Common/primitive_type.h"
   #include "Math/TVector3.h"
   #include "Math/Geometry/TAABB3D.h"
   
   namespace ph
   {
   
   class Ray;
   class HitProbe;
   class HitDetail;
   class PrimitiveMetadata;
   class PrimitivePosSampleQuery;
   class SampleFlow;
   
   class Primitive : public Intersectable
   {
   public:
       explicit Primitive(const PrimitiveMetadata* metadata);
   
       bool isIntersecting(const Ray& ray, HitProbe& probe) const override = 0;
   
       void calcIntersectionDetail(
           const Ray& ray, 
           HitProbe&  probe,
           HitDetail* out_detail) const override = 0;
   
       math::AABB3D calcAABB() const override = 0;
   
       virtual void genPositionSample(PrimitivePosSampleQuery& query, SampleFlow& sampleFlow) const;
   
       virtual real calcPositionSamplePdfA(const math::Vector3R& position) const;
   
       virtual real calcExtendedArea() const;
   
       // TODO: make this method for EmitablePrimitive
       // This method calculates the position mapped to the specified uvw 
       // coordinates. This kind of inverse mapping may not be always possible; 
       // if the mapping failed, false is returned.
       virtual bool uvwToPosition(
           const math::Vector3R& uvw,
           math::Vector3R*       out_position) const;
   
       const PrimitiveMetadata* getMetadata() const;
   
   protected:
       const PrimitiveMetadata* m_metadata;
   };
   
   // In-header Implementation:
   
   inline real Primitive::calcPositionSamplePdfA(const math::Vector3R& position) const
   {
       return 0.0_r;
   }
   
   inline real Primitive::calcExtendedArea() const
   {
       return 0.0_r;
   }
   
   inline const PrimitiveMetadata* Primitive::getMetadata() const
   {
       return m_metadata;
   }
   
   inline bool Primitive::uvwToPosition(
       const math::Vector3R& /* uvw */,
       math::Vector3R*       /* out_position */) const
   {
       return false;
   }
   
   }// end namespace ph
