
.. _program_listing_file_Source_Math_Transform_DynamicLinearTranslation.h:

Program Listing for File DynamicLinearTranslation.h
===================================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Math_Transform_DynamicLinearTranslation.h>` (``Source\Math\Transform\DynamicLinearTranslation.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Math/Transform/RigidTransform.h"
   #include "Math/TVector3.h"
   
   namespace ph::math
   {
   
   class DynamicLinearTranslation : public RigidTransform
   {
   public:
       DynamicLinearTranslation(const Vector3R& translationT0, 
                                const Vector3R& translationT1);
   
       std::unique_ptr<Transform> genInversed() const override;
   
   private:
       void transformVector(
           const Vector3R& vector,
           const Time&     time,
           Vector3R*       out_vector) const override;
   
       void transformOrientation(
           const Vector3R& orientation,
           const Time&     time,
           Vector3R*       out_orientation) const override;
   
       void transformPoint(
           const Vector3R& point,
           const Time&     time,
           Vector3R*       out_point) const override;
   
       void transformLineSegment(
           const Vector3R& lineStartPos,
           const Vector3R& lineDir,
           real            lineMinT,
           real            lineMaxT,
           const Time&     time,
           Vector3R*       out_lineStartPos,
           Vector3R*       out_lineDir,
           real*           out_lineMinT,
           real*           out_lineMaxT) const override;
   
       Vector3R m_translationT0;
       Vector3R m_translationT1;
   };
   
   }// end namespace ph::math
