
.. _program_listing_file_Source_Math_Geometry_TDisk.h:

Program Listing for File TDisk.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Math_Geometry_TDisk.h>` (``Source\Math\Geometry\TDisk.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Common/assertion.h"
   #include "Math/TVector2.h"
   #include "Math/TVector3.h"
   #include "Math/constant.h"
   
   #include <cmath>
   #include <array>
   
   namespace ph::math
   {
   
   template<typename T>
   class TDisk final
   {
   public:
       TDisk() = default;
       explicit TDisk(T radius);
   
       T getArea() const;
   
       TVector3<T> sampleToSurface(const std::array<T, 2>& sample) const;
       TVector3<T> sampleToSurface(const std::array<T, 2>& sample, T* out_pdfA) const;
   
       TVector2<T> sampleToSurface2D(const std::array<T, 2>& sample) const;
       TVector2<T> sampleToSurface2D(const std::array<T, 2>& sample, T* out_pdfA) const;
   
       TVector3<T> sampleToSurfaceOriented(
           const std::array<T, 2>& sample, 
           const TVector3<T>&      normal = TVector3<T>(0, 1, 0),
           const TVector3<T>&      offset = TVector3<T>(0)) const;
   
       TVector3<T> sampleToSurfaceOriented(
           const std::array<T, 2>& sample, 
           T*                      out_pdfA,
           const TVector3<T>&      normal = TVector3<T>(0, 1, 0),
           const TVector3<T>&      offset = TVector3<T>(0)) const;
   
   private:
       T m_radius;
   
       T uniformSamplePdfA() const;
   };
   
   }// end namespace ph::math
   
   #include "Math/Geometry/TDisk.ipp"
