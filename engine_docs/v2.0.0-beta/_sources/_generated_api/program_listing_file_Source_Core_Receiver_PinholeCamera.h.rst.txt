
.. _program_listing_file_Source_Core_Receiver_PinholeCamera.h:

Program Listing for File PinholeCamera.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Core_Receiver_PinholeCamera.h>` (``Source\Core\Receiver\PinholeCamera.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Core/Receiver/RectangularSensorReceiver.h"
   #include "Math/TVector3.h"
   
   namespace ph
   {
   
   class PinholeCamera : public RectangularSensorReceiver
   {
   public:
       PinholeCamera(
           const math::Vector2D&       sensorSize,
           const math::Transform*      rasterToSensor,
           const math::RigidTransform* cameraToWorld);
   
       math::Spectrum receiveRay(const math::Vector2D& rasterCoord, Ray* out_ray) const override;
       void evalEmittedImportanceAndPdfW(const math::Vector3R& targetPos, math::Vector2R* const out_filmCoord, math::Vector3R* const out_importance, real* out_filmArea, real* const out_pdfW) const override;
   
       // TODO: need Time
       //const math::Vector3R& getPinholePos() const;
       const math::RigidTransform& getCameraToWorld() const;
   
   private:
       //math::Vector3R m_pinholePos;
   
       math::Vector3R genReceiveRayDir(const math::Vector2D& rasterCoord) const;
   };
   
   // In-header Implementations:
   
   //inline const math::Vector3R& PinholeCamera::getPinholePos() const
   //{
   //  return m_pinholePos;
   //}
   
   inline const math::RigidTransform& PinholeCamera::getCameraToWorld() const
   {
       return getReceiverToWorld();
   }
   
   }// end namespace ph
