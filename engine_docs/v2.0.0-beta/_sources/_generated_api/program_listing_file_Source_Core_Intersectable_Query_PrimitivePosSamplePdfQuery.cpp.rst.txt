
.. _program_listing_file_Source_Core_Intersectable_Query_PrimitivePosSamplePdfQuery.cpp:

Program Listing for File PrimitivePosSamplePdfQuery.cpp
=======================================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Core_Intersectable_Query_PrimitivePosSamplePdfQuery.cpp>` (``Source\Core\Intersectable\Query\PrimitivePosSamplePdfQuery.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include "Core/Intersectable/Query/PrimitivePosSamplePdfQuery.h"
   #include "Core/HitDetail.h"
   #include "Core/Intersectable/Query/PrimitivePosSampleQuery.h"
   #include "Common/assertion.h"
   
   namespace ph
   {
   
   PrimitivePosSamplePdfInput::PrimitivePosSamplePdfInput() :
       position(0),
       faceId  (HitDetail::NO_FACE_ID)
   {}
   
   void PrimitivePosSamplePdfInput::set(const math::Vector3R& position)
   {
       set(position, HitDetail::NO_FACE_ID);
   }
   
   void PrimitivePosSamplePdfInput::set(const math::Vector3R& position, const std::size_t faceId)
   {
       this->position = position;
       this->faceId   = faceId;
   }
   
   void PrimitivePosSamplePdfInput::set(const HitDetail& detail)
   {
       set(detail.getPosition(), detail.getFaceId());
   }
   
   void PrimitivePosSamplePdfInput::set(const PrimitivePosSampleQuery& query)
   {
       PH_ASSERT(query.out);
   
       set(query.out.position, query.out.faceId);
   }
   
   }// end namespace ph
