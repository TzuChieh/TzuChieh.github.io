
.. _program_listing_file_Source_DataIO_Stream_FormattedTextFileOutputStream.h:

Program Listing for File FormattedTextFileOutputStream.h
========================================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_DataIO_Stream_FormattedTextFileOutputStream.h>` (``Source\DataIO\Stream\FormattedTextFileOutputStream.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "DataIO/Stream/StdOutputStream.h"
   #include "DataIO/FileSystem/Path.h"
   
   #include <string_view>
   #include <format>
   #include <utility>
   
   namespace ph
   {
   
   class FormattedTextFileOutputStream : public StdOutputStream
   {
   public:
       inline FormattedTextFileOutputStream() = default;
       explicit FormattedTextFileOutputStream(const Path& filePath);
       inline FormattedTextFileOutputStream(FormattedTextFileOutputStream&& other) = default;
   
       std::string acquireName() override;
   
       void writeLine(std::string_view line);
       void writeString(std::string_view str);
       void writeChar(char ch);
       void writeNewLine();
   
       template<typename... Args>
       void writeString(std::string_view formatStr, Args&&... args);
   
       inline FormattedTextFileOutputStream& operator = (FormattedTextFileOutputStream&& rhs) = default;
   
   private:
       Path m_filePath;
   };
   
   // In-header Implementations:
   
   template<typename... Args>
   inline void FormattedTextFileOutputStream::writeString(const std::string_view formatStr, Args&&... args)
   {
       writeString(
           std::vformat(formatStr, std::make_format_args(std::forward<Args>(args)...)));
   }
   
   }// end namespace ph
