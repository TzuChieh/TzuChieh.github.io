
.. _program_listing_file_Source_DataIO_SDL_Introspect_SdlIOContext.h:

Program Listing for File SdlIOContext.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_DataIO_SDL_Introspect_SdlIOContext.h>` (``Source\DataIO\SDL\Introspect\SdlIOContext.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "DataIO/FileSystem/Path.h"
   
   #include <utility>
   #include <string>
   
   namespace ph { class SdlClass; }
   
   namespace ph
   {
   
   class SdlIOContext
   {
   public:
       std::string genPrettySrcClassName() const;
       const Path& getWorkingDirectory() const;
   
       const SdlClass* getSrcClass() const;
   
       void setSrcClass(const SdlClass* srcClass);
   
   // Protected, to prevent certain polymorphic usage
   protected:
       SdlIOContext();
   
       SdlIOContext(
           Path            workingDirectory,
           const SdlClass* srcClass);
   
       inline ~SdlIOContext() = default;
   
       inline SdlIOContext(const SdlIOContext& other) = default;
       inline SdlIOContext& operator = (const SdlIOContext& rhs) = default;
   
       inline SdlIOContext(SdlIOContext&& other) = default;
       inline SdlIOContext& operator = (SdlIOContext&& rhs) = default;
   
   private:
       Path            m_workingDirectory;
       const SdlClass* m_srcClass;
   };
   
   // In-header Implementation:
   
   inline SdlIOContext::SdlIOContext() :
       m_workingDirectory(),
       m_srcClass        (nullptr)
   {}
   
   inline SdlIOContext::SdlIOContext(
       Path                  workingDirectory,
       const SdlClass* const srcClass) :
   
       m_workingDirectory(std::move(workingDirectory)),
       m_srcClass        (srcClass)
   {}
   
   inline const Path& SdlIOContext::getWorkingDirectory() const
   {
       return m_workingDirectory;
   }
   
   inline const SdlClass* SdlIOContext::getSrcClass() const
   {
       return m_srcClass;
   }
   
   inline void SdlIOContext::setSrcClass(const SdlClass* const srcClass)
   {
       m_srcClass = srcClass;
   }
   
   }// end namespace ph
