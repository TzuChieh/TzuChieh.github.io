
.. _program_listing_file_Source_Math_Geometry_TAABB3D.h:

Program Listing for File TAABB3D.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_Source_Math_Geometry_TAABB3D.h>` (``Source\Math\Geometry\TAABB3D.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "Common/primitive_type.h"
   #include "Math/TVector3.h"
   #include "Math/math.h"
   #include "Math/constant.h"
   #include "Math/Geometry/TLineSegment.h"
   
   #include <array>
   #include <string>
   #include <utility>
   
   namespace ph::math
   {
   
   template<typename T>
   class TAABB3D;
   
   using AABB3D = TAABB3D<real>;
   
   template<typename T>
   class TAABB3D final
   {
   public:
       static TAABB3D makeUnioned(const TAABB3D& a, const TAABB3D& b);
   
   public:
       TAABB3D();
   
       explicit TAABB3D(const TVector3<T>& point);
   
       TAABB3D(const TVector3<T>& minVertex, const TVector3<T>& maxVertex);
   
       TAABB3D& unionWith(const TAABB3D& other);
   
       TAABB3D& unionWith(const TVector3<T>& point);
   
       TAABB3D& setMinVertex(const TVector3<T>& minVertex);
   
       TAABB3D& setMaxVertex(const TVector3<T>& maxVertex);
   
       TAABB3D& setVertices(std::pair<TVector3<T>, TVector3<T>> minMaxVertices);
   
       TAABB3D& expand(const TVector3<T>& amount);
   
       bool isIntersectingVolume(const TLineSegment<T>& segment) const;
   
       bool isIntersectingVolume(
           const TLineSegment<T>& segment,
           T*                     out_nearHitT, 
           T*                     out_farHitT) const;
   
       bool isIntersectingVolume(const TAABB3D& other) const;
   
       bool isPoint() const;
   
       bool isFiniteVolume() const;
   
       bool isValid() const;
   
       std::pair<TVector3<T>, TVector3<T>> getVertices() const;
   
       std::array<TVector3<T>, 8> getBoundVertices() const;
   
       const TVector3<T>& getMinVertex() const;
   
       const TVector3<T>& getMaxVertex() const;
   
       TVector3<T> getCentroid() const;
   
       TVector3<T> getExtents() const;
   
       T getSurfaceArea() const;
   
       T getVolume() const;
   
       std::pair<TAABB3D, TAABB3D> getSplitted(constant::AxisIndexType axis, T splitPoint) const;
   
       std::string toString() const;
   
       // TODO: a variant with margins for floating types
       bool isEqual(const TAABB3D& other) const;
   
   private:
       TVector3<T> m_minVertex;
       TVector3<T> m_maxVertex;
   };
   
   }// end namespace ph::math
   
   #include "Math/Geometry/TAABB3D.ipp"
